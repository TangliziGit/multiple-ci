#!/bin/env bash

MCI_HOME=/srv/mci
LKP_SRC=/srv/lkp

# ====================== DEPLOYMENT STEPS ======================
# 1. install depends tools below by specific Linux distribution:
#   - qemu
#   - docker
#   - dnsmasq
#   - nfs-server
# 2. install this project:
#   - run `bin/mci-deploy install`
# 3. build your OS:
#   1. download CentOS7 ISO into `${MCI_HOME}/iso/`:
#       - CentOS-7-x86_64-Minimal-2009.iso
#   2. run `bin/mci-deploy os build`, then qemu will pop up
#   3. install os normally, install all tools in `$LKP_SRC/distro/depends/lkp-dev`,
#       disable SELinux, and then poweroff qemu
#   4. run `bin/mci-deploy os mount`, and take care of `lsblk`
#       The output will be like:
#       ```
#       nbd0             43:0    0    15G  0 disk
#       ├─nbd0p1         43:1    0     1G  0 part
#       ├─nbd0p2         43:2    0   1.5G  0 part
#       └─nbd0p3         43:3    0  12.5G  0 part
#       ```
#   5. mount the root partition which you just install, here we run:
#       `sudo mount /dev/nbd0p3 /mnt`
#   6. copy all files into `$MCI_HOME/os/centos7`:
#       `sudo rsync -a /mnt/. $MCI_HOME/os/centos7`
#   7. and do not forget comment all lines in `$MCI_HOME/os/centos7/etc/fstab`,
#       which may break testbox mounting process.
#   8. umount the partition `sudo umount /mnt` and `bin/mci-deploy os umount`
#   9. generate modules initramfs:
#       `bin/mci-deploy initrd modules /srv/mci/os/centos7/lib/modules/3.10.0-1160.el7.x86_64`
# 4. generate lkp initrd:
#       `bin/mci-deploy initrd lkp`
# 5. start all dependencies tools & network configs:
#       `bin/mci-deploy start`
# 6. run testbox:
#       `bin/mci-deploy testbox run`
# 7. then you can start mci-scanner, mci-scheduler, ...
#
#
# NOTE:
#   - If deployment was successfully done, then the next time you want to start
#       up testboxes or mci-xxx, you only need to run `bin/mci-deploy start`.
# ==============================================================


here="$(dirname "$0")"

# ====================== utility ======================
unknown-command() {
    echo "no such command: $*"
}

# ====================== start ======================
start-network() {
    ip link | grep -q "br0" || {
        sudo ip link add br0 type bridge
        sudo ip addr add 172.20.0.1/16 dev br0
        sudo ip link set br0 up
    }

    # `dnsmasq` runs DNS server and TFTP for ipxe network procedure
    services=("dnsmasq" "nfs-server")
    for service in "${services[@]}"; do
        [[ "$(systemctl is-active "$service")" == "active" ]] || {
            sudo systemctl restart "$service"
        }
    done
}

start-depends() {
    docker start redis
    docker start es
    docker start webdav
    [[ "$(docker ps -a | grep rabbitmq | awk '{print $7}')" == "Up" ]] || {
        docker start rabbitmq
        sleep 5s
    }
}

# ====================== testbox ======================
testbox-teardown() {
    for pid_path in "$MCI_HOME"/qemu/pid/*; do
        [[ -f "$pid_path" ]] || continue
        pid="$(< "$pid_path")"
        while [[ -n "$(ps -p "$pid" -o comm=)" ]]; do
            kill "$pid"
        done
        rm "$pid_path"
    done
}

testbox-run() {
    opts=()
    count=1
    for _ in $(seq "$#"); do
        arg="$1"
        shift
        case "$arg" in
            -count) count="$1"; shift 1;;
            "") ;;
            *) opts+=("$arg");;
        esac
    done

    for i in $(seq "$count"); do
        pid_path="$MCI_HOME/qemu/pid/testbox$i.pid"
        [[ -f "$pid_path" ]] && {
            echo "testbox is running: pid_file=$pid_path"
            exit 1
        }
    done

    sudo modprobe nbd
    for i in $(seq "$count"); do
        storage_path="${MCI_HOME}/qemu/vda$i.qcow2"
        [[ -f "$storage_path" ]] || {
            qemu-img create -f qcow2 "$storage_path" 15G
            sudo qemu-nbd -c /dev/nbd0 "$storage_path"
            cmd="$(printf "n\np\n1\n\n\nw\n")"
            echo "$cmd" | sudo fdisk /dev/nbd0
            mkfs.ext4 /dev/nbd0p1
            sudo qemu-nbd -d /dev/nbd0
        }

        ipxe_path="${MCI_HOME}/iso/ipxe.iso"
        [[ -f "$ipxe_path" ]] || {
            echo "downloading: $ipxe_path"
            wget "http://boot.ipxe.org/ipxe.iso" -o "$ipxe_path"
        }

        mac="$(printf "52:54:00:00:00:%02x" "$i")"
        echo "opts: ${opts[*]} (${#opts[@]})"
        qemu-system-x86_64 \
            -enable-kvm \
            -m 2G \
            -smp 2 \
            -cdrom $ipxe_path \
            -boot order=d \
            -drive file="$storage_path",format=qcow2 \
            -net nic,macaddr="$mac" \
            -net bridge,br=br0 "${opts[@]}" &

        pid_path="$MCI_HOME/qemu/pid/testbox$i.pid"
        echo "$!" > "$pid_path"
    done

}

testbox() {
    start-network
    case $2 in
        "run")      testbox-run "${@:3}";;
        "teardown") testbox-teardown;;
        "*")        unknown-command "$@";;
    esac
}

# ====================== os ======================
os-build() {
    iso_path="${MCI_HOME}/iso/CentOS-7-x86_64-Minimal-2009.iso"
    [[ -f "$iso_path" ]] || {
        echo "No such file: $iso_path"
        echo "please download centos 7 iso, and move to $iso_path"
        exit 0
    }

    storage_path="${MCI_HOME}/qemu/centos7.qcow2"
    [[ -f "$storage_path" ]] || {
        qemu-img create -f qcow2 "$storage_path" 10G
    }

    qemu-system-x86_64 \
        -cdrom ${MCI_HOME}/iso/CentOS-7-x86_64-Minimal-2009.iso \
        -enable-kvm \
        -m 2G \
        -smp 8 \
        -boot order=d \
        -drive file=$storage_path,format=qcow2 \
        -net nic,macaddr=52:54:00:00:00:01 \
        -net bridge,br=br0
}

os-run() {
    storage_path="${MCI_HOME}/qemu/centos7.qcow2"
    [[ -f "$storage_path" ]] || {
        echo "No such file: centos7.qcow2"
        exit 0
    }

    qemu-system-x86_64 \
        -enable-kvm \
        -m 8G \
        -smp 8 \
        -boot order=d \
        -drive file=$storage_path,format=qcow2 \
        -net nic,macaddr=52:54:00:00:00:01 \
        -net bridge,br=br0
}

os-mount() {
    storage_path="${MCI_HOME}/qemu/centos7.qcow2"
    sudo modprobe nbd
    sudo qemu-nbd -c /dev/nbd0 "$storage_path"
}

os-umount() {
    sudo qemu-nbd -d /dev/nbd0
}

os() {
    start-network
    case $2 in
        "build")    os-build;;
        "run")      os-run;;
        "mount")    os-mount;;
        "umount")   os-umount;;
        "*")        unknown-command "$@";;
    esac
}

# ====================== initrd ======================
initrd-job() {
    script="$LKP_SRC/sbin/create-job-cpio.sh"
    LKP_SRC=$LKP_SRC $script "$1"
}

initrd-lkp() {
    docker run \
        --rm \
        -e ARCH="$(uname -m)" \
        -e LKP_SRC=$LKP_SRC \
        -v $LKP_SRC:$LKP_SRC \
        -v ${MCI_HOME}/initrd:/osimage/user/lkp \
        tanglizi/alpine:lkp /root/bin/pack-lkp.sh 2> /dev/null
}

initrd-modules() {
    kver=$(basename "$1")
    root=${1%/lib/modules/*}

    kernel_modules=/lib/modules/$kver
    initrd_output=/boot/initramfs.lkp-${kver}.img

    docker run \
        --rm \
        -v "$root/boot":/boot \
        -v "$root/lib/modules":/lib/modules \
        tanglizi/debian:dracut bash -c \
        "dracut --force --kver $kver -k $kernel_modules $initrd_output && chmod 644 $initrd_output"
}

initrd() {
    case $2 in
        "job")      initrd-job "$3";;
        "lkp")      initrd-lkp;;
        "modules")  initrd-modules "$3";;
        "*")        unknown-command "$@";;
    esac
}


# ====================== install ======================
install-venv() {
    cd "$here/.." || {
        echo "No such directory: $here/.."
        exit 0
    }

    [[ -d "venv" ]] || {
        python -m venv venv
        source "$here/../venv/bin/activate"
        pip install -e "$here/.."
    }
}

install-depends() {
    docker ps -a | grep -q redis || {
        docker run --name redis \
           -p 6379:6379 -d \
           redis
    }

    docker ps -a | grep -q rabbitmq || {
        docker run --name rabbitmq \
            -p 5672:5672 \
            -p 15672:15672 \
            --hostname rabbitmq \
            -e RABBITMQ_DEFAULT_USER=root \
            -e RABBITMQ_DEFAULT_PASS=123456 -d \
            rabbitmq:3-management
    }

    docker ps -a | grep -q es || {
        docker run --name es \
            -p 9200:9200 \
            -p 9300:9300 \
            -e "discovery.type=single-node" \
            -e ES_JAVA_OPTS="-Xms256m -Xmx256m" \
            -e "xpack.security.enabled=false" \
            -e "xpack.security.http.ssl.enabled=false" -d \
            elasticsearch:8.5.3
    }

    docker ps -a | grep -q webdav || {
        docker run --name webdav \
            -p 3080:3080 \
            -v /etc/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf \
            -v /srv/result/:/srv/result/ -d \
            tanglizi/webdav
    }
}

install-directory() {
    [[ -d "$MCI_HOME" ]] || {
        sudo mkdir -p $MCI_HOME
        sudo chown -R "$USER" $MCI_HOME
        mkdir $MCI_HOME/os
        mkdir $MCI_HOME/iso
        mkdir $MCI_HOME/qemu
        mkdir $MCI_HOME/qemu/pid
        mkdir $MCI_HOME/job
        mkdir $MCI_HOME/initrd
    }

    [[ -d "/srv/git" ]] || {
        sudo mkdir /srv/git
    }

    [[ -d "/srv/result" ]] || {
        sudo mkdir /srv/result
        sudo chmod 777 /srv/result
    }
}

install-configs() {
cat <<EOF | sudo tee /etc/nginx.conf > /dev/null
events {}

http {
    server {
        listen 3080;
        server_name "webdav";
        server_tokens off;
        client_max_body_size 2048m;
        access_log /tmp/access.log;
        error_log /tmp/error.log;

        location / {
            root   /srv/result;
            dav_methods PUT DELETE MKCOL COPY MOVE;

            dav_access user:rw group:rw all:rw;
            client_max_body_size 0;
            create_full_put_path on;
            client_body_temp_path /srv/client-temp;
            autoindex on;

            allow all;
        }
    }
}
EOF

# for testing without mci-scheduler, we choose `boot-dev.ipxe`
cat <<EOF | sudo tee ${MCI_HOME}/os/boot-dev.ipxe > /dev/null
#!ipxe
initrd tftp://172.20.0.1/os/centos7/boot/modules-3.10.0-1160.el7.x86_64.cgz
initrd tftp://172.20.0.1/os/centos7/boot/initramfs.lkp-3.10.0-1160.el7.x86_64.img
initrd tftp://172.20.0.1/initrd/lkp-x86_64.cgz
kernel tftp://172.20.0.1/os/centos7/boot/vmlinuz-3.10.0-1160.el7.x86_64 user=lkp job=/lkp/scheduled/job.yaml ip=dhcp rootovl ro root=172.20.0.1:${MCI_HOME}/os/centos7 initrd=initramfs.lkp-3.10.0-1160.el7.x86_64.img initrd=modules-3.10.0-1160.el7.x86_64.cgz initrd=lkp-x86_64.cgz rootfs_disk=/dev/sda
boot
EOF

cat <<EOF | sudo tee ${MCI_HOME}/os/boot.ipxe > /dev/null
#!ipxe
cpuid --ext 29 && set arch x86_64 || set arch i386
chain http://172.20.0.1:3000/boot.ipxe?arch=\${arch}&mac=\${net0/mac} || sleep 10 && reboot
EOF

# job 1234, just for demo
mkdir -p "${MCI_HOME}/job/1234"
cat <<EOF | sudo tee ${MCI_HOME}/job/1234/job.yaml > /dev/null
suite: kbuild
category: benchmark

os: centos
os_version: 7
os_arch: x86_64
os_mount: nfs

id: '1234'
result_service: raw_upload
RESULT_ROOT: '/result'
LKP_SERVER: '172.20.0.1'

runtime: 300s
nr_cpu: 8
nr_task: 200%
build_kconfig: allyesconfig
target: bzImage
kbuild:

define_files:
  pkg/kbuild/PKGBUILD: "pkgname=kbuild\npkgver=5.4\npkgrel=1\narch=('i386' 'x86_64')\n\
    url=\"https://www.kernel.org/pub/linux/kernel\"\nlicense=('GPL')\nsource=(\"https://www.kernel.org/pub/linux/kernel/v5.x/linux-5.4.tar.xz\"\
    )\nsha256sums=('bf338980b1670bca287f9994b7441c2361907635879169c64ae78364efc5f491')\n\
    \npackage() {\n\tmkdir \$RESULT_ROOT\n\tmkdir -p \"/lkp/benchmarks/\${pkgname}/linux\"\n\tmv \
    \"\$srcdir/linux-\${pkgver}/\"* \"/lkp/benchmarks/\${pkgname}/linux\"\
    \n}\n"
EOF

cat <<EOF | sudo tee /etc/dnsmasq.conf > /dev/null
interface=br0
bind-interfaces
dhcp-range=172.20.0.2,172.20.255.254
dhcp-boot=os/boot.ipxe
enable-tftp
tftp-root=${MCI_HOME}
EOF

cat <<EOF | sudo tee /etc/exports > /dev/null
${MCI_HOME}/os/centos7    *(rw,sync,no_subtree_check,fsid=root,no_root_squash)
EOF

    grep -q "allow br0" /etc/qemu/bridge.conf || {
        echo "allow br0" | sudo tee -a /etc/qemu/bridge.conf
    }
}

install-lkp() {
    [[ -d "$LKP_SRC" ]] || {
        sudo git clone https://github.com/TangliziGit/lkp-tests $LKP_SRC
    }
}

install() {
    install-venv
    install-directory
    install-configs
    install-depends
    install-lkp
}

# ====================== clean ======================
clean-redis() {
  echo "flushall sync" | redis-cli > /dev/null
}

clean-es() {
  curl -s -X POST "localhost:9200/job/_delete_by_query?pretty" \
    -H 'Content-Type: application/json' \
    -d'{"query": {"match_all": {}}}' > /dev/null

  curl -s -X POST "localhost:9200/plan/_delete_by_query?pretty" \
    -H 'Content-Type: application/json' \
    -d'{"query": {"match_all": {}}}' > /dev/null
}

clean-job() {
  rm -rf $MCI_HOME/job/*
  sudo rm -rf /srv/result/*
}

clean() {
  case $2 in
  "redis")  clean-redis;;
  "es")     clean-es;;
  "job")    clean-job;;
  "all")
    clean-redis
    clean-es
    clean-job
    ;;
  "*")  unknown-command "$@";;
  esac
}

# ====================== options ======================
case $1 in
    "os")
        os "$@"
        ;;
    "testbox")
        testbox "$@"
        ;;
    "initrd")
        initrd "$@"
        ;;
    "clean")
        clean "$@"
        ;;
    "install")
        install
        ;;
    "start")
        start-network
        start-depends
        ;;
    "*")
        unknown-command "$@"
        ;;
esac
