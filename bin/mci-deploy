#!/bin/env bash

MCI_HOME=/srv/mci

# ====================== DEPLOYMENT STEPS ======================
# 1. install depends tools below by specific Linux distribution:
#   - qemu
#   - docker
#   - dnsmasq
#   - nfs-server
# 2. install this project:
#   - run `bin/mci-deploy install`
# 3. download CentOS7 ISO into `${MCI_HOME}/iso/`:
#   - CentOS-7-x86_64-Minimal-2009.iso
# 4. build your OS:
#   1. run `bin/mci-deploy os build`, then qemu will pop up
#   2. install os normally, then poweroff qemu
#   3. run `bin/mci-deploy os mount`, and take care of `lsblk`.
#       your output will be like:
#       ```
#       nbd0             43:0    0    15G  0 disk
#       ├─nbd0p1         43:1    0     1G  0 part
#       ├─nbd0p2         43:2    0   1.5G  0 part
#       └─nbd0p3         43:3    0  12.5G  0 part
#       ```
#   4. mount the root partition which you just install, here we run:
#       `sudo mount /dev/nbd0p3 /mnt`
#   5. copy all files into `$MCI_HOME/os/centos7`:
#       `sudo rsync -a /mnt/. $MCI_HOME/os/centos7`
#   6. and do not forget comment all lines in `$MCI_HOME/os/centos7/etc/fstab`,
#       which may break testbox mounting process.
# 5. start all dependencies tools & network configs:
#       `bin/mci-deploy start`
# 6. run testbox:
#       `bin/mci-deploy testbox run`
# 7. then you can start mci-scanner, mci-scheduler, ...
# ==============================================================


here="$(dirname "$0")"


# ====================== testbox ======================
testbox-run() {
    storage_path="${MCI_HOME}/qemu/vda.qcow2"
    [[ -f "$storage_path" ]] || {
        qemu-img create -f qcow2 "$storage_path" 15G
    }

    ipxe_path="${MCI_HOME}/iso/ipxe.iso"
    [[ -f "$ipxe_path" ]] || {
        echo "downloading: $ipxe_path"
        wget "http://boot.ipxe.org/ipxe.iso" -O "$ipxe_path"
    }

    qemu-system-x86_64 \
        -enable-kvm \
        -m 2G \
        -smp 8 \
        -cdrom  \
        -boot order=d \
        -drive file=$storage_path,format=qcow2 \
        -net nic,macaddr=52:54:00:00:00:01 \
        -net bridge,br=br0
}

testbox() {
    case $2 in
        "run")  testbox-run;;
    esac
}

# ====================== os ======================
os-build() {
    iso_path="${MCI_HOME}/iso/CentOS-7-x86_64-Minimal-2009.iso"
    [[ -f "$iso_path" ]] || {
        echo "No such file: $iso_path"
        echo "please download centos 7 iso, and move to $iso_path"
        exit 0
    }

    storage_path="${MCI_HOME}/qemu/centos7.qcow2"
    [[ -f "$storage_path" ]] || {
        qemu-img create -f qcow2 "$storage_path" 5G
    }

    qemu-system-x86_64 \
        -cdrom ${MCI_HOME}/iso/CentOS-7-x86_64-Minimal-2009.iso \
        -enable-kvm \
        -m 2G \
        -smp 8 \
        -boot order=d \
        -drive file=$storage_path,format=qcow2 \
        -net nic,macaddr=52:54:00:00:00:01 \
        -net bridge,br=br0
}

os-run() {
    storage_path="${MCI_HOME}/qemu/centos7.qcow2"
    [[ -f "$storage_path" ]] || {
        echo "No such file: centos7.qcow2"
        exit 0
    }

    qemu-system-x86_64 \
        -enable-kvm \
        -m 2G \
        -smp 8 \
        -boot order=d \
        -drive file=$storage_path,format=qcow2 \
        -net nic,macaddr=52:54:00:00:00:01 \
        -net bridge,br=br0
}

os-mount() {
    storage_path="${MCI_HOME}/qemu/centos7.qcow2"
    sudo modprobe nbd
    sudo qemu-nbd -c /dev/nbd0 "$storage_path"
}

os-umount() {
    sudo qemu-nbd -d /dev/nbd0
}

os() {
    case $2 in
        "build")    os-build;;
        "run")      os-run;;
        "mount")    os-mount;;
        "umount")   os-umount;;
    esac
}


# ====================== install ======================
install-venv() {
    cd "$here/.." || {
        echo "No such directory: $here/.."
        exit 0
    }

    [[ -f "venv" ]] || python -m venv venv
    source "$here/../venv/bin/activate"
    pip install -e "$here/.."
}

install-depends() {
    docker ps -a | grep -q redis || {
        docker run --name redis \
           -p 6379:6379 -d \
           redis
    }

    docker ps -a | grep -q rabbitmq || {
        docker run --name rabbitmq \
            -p 5672:5672 \
            -p 15672:15672 \
            --hostname rabbitmq \
            -e RABBITMQ_DEFAULT_USER=root \
            -e RABBITMQ_DEFAULT_PASS=123456 -d \
            rabbitmq:3-management
    }

    docker ps -a | grep -q es || {
        docker run --name es \
            -p 9200:9200 \
            -p 9300:9300 \
            -e "discovery.type=single-node" \
            -e ES_JAVA_OPTS="-Xms256m -Xmx256m" \
            -e "xpack.security.enabled=false" \
            -e "xpack.security.http.ssl.enabled=false" -d \
            elasticsearch:8.5.3
    }

    docker ps -a | grep -q webdav || {
        docker run --name webdav \
            -p 3080:3080 \
            -v /etc/nginx.conf:/usr/local/openresty/nginx/conf/nginx.conf \
            -v /srv/result/:/srv/result/ -d \
            tanglizi/webdav
    }
}

install-directory() {
    [[ -d "$MCI_HOME" ]] || {
        mkdir -p $MCI_HOME
        mkdir $MCI_HOME/os
        mkdir $MCI_HOME/iso
        mkdir $MCI_HOME/qemu
    }

    [[ -d "/srv/git" ]] || {
        sudo mkdir /srv/git
    }

    [[ -d "/srv/result" ]] || {
        sudo mkdir /srv/result
        sudo chmod 777 /srv/result
    }
}

install-configs() {
cat <<EOF | sudo tee /etc/nginx.conf > /dev/null
events {}

http {
    server {
        listen 3080;
        server_name "webdav";
        server_tokens off;
        client_max_body_size 2048m;
        access_log /tmp/access.log;
        error_log /tmp/error.log;

        location / {
            root   /srv/result;
            dav_methods PUT DELETE MKCOL COPY MOVE;

            dav_access user:rw group:rw all:rw;
            client_max_body_size 0;
            create_full_put_path on;
            client_body_temp_path /srv/client-temp;
            autoindex on;

            allow all;
        }
    }
}
EOF

cat <<EOF | sudo tee /etc/dnsmasq.conf > /dev/null
interface=br0
bind-interfaces
dhcp-range=172.20.0.2,172.20.255.254
dhcp-boot=/os/boot.ipxe
enable-tftp
tftp-root=${MCI_HOME}
EOF

cat <<EOF | sudo tee /etc/exports > /dev/null
${MCI_HOME}/os/centos7    *(rw,sync,no_subtree_check,fsid=root,no_root_squash)
EOF

    grep -q "allow br0" /etc/qemu/bridge.conf || {
        echo "allow br0" | sudo tee -a /etc/qemu/bridge.conf
    }
}

install() {
    install-venv
    install-directory
    install-configs
    install-depends
}

# ====================== start ======================
start-network() {
    sudo ip link add br0 type bridge
    sudo ip addr add 172.20.0.1/16 dev br0
    sudo ip link set br0 up

    # `dnsmasq` runs DNS server and TFTP for ipxe network procedure
    sudo systemctl start dnsmasq
    sudo systemctl start nfs-server
}

start-depends() {
    docker start redis
    docker start rabbitmq
    docker start es
    docker start webdav
}


# ====================== options ======================
case $1 in
    "os")
        os "$@"
        ;;
    "testbox")
        testbox "$@"
        ;;
    "install")
        install
        ;;
    "start")
        start-network
        start-depends
        ;;
esac
